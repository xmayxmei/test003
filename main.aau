import win.ui;
import win.util.round;
import win.region.round;
import web.layout;
import web.layout.behavior.windowCommand;
import web.layout.behavior.windowSizer;
import web.layout.behavior.tabs; //导入behavior
import sqlite;
import console;
import win.ui.atom;
import win.util.tray;
import win.reg;
import fsys.lnk;
/*DSG{{*/
var mainForm = ..win.form(text="喝水闹钟";right=549;bottom=399;border="none";parent=...;topmost=1)
mainForm.add()
/*}}*/

var frmName = "喝水闹钟";//
var frmTitle = "喝水闹钟，定时提醒您该喝水啦。";
var titlRemdStr = "^_^亲，该喝水啦！";
var restRemStr = "^_^亲，该休息啦！";
var currRemdTempl = "{0},建议喝水{1}ML";//建议喝水模板
var nextRemdTempl = "距离下次喝水还有{0}分钟";//下次喝水模板
var remdTimeTabStr = "8:30,9:30,10:30,11:30,12:30,14:00,15:00,16:00,17:00,18:00";
var remdAmtTabStr = "150,200,200,200,150,200,200,200,150,150";

var isShowWindow = true;//是否显示窗口（可配置）
var isPlaySound = true;//是否声音提醒（可配置）
var showReason = "";//显示窗口原因（时间到显示5分钟，手工显示5分钟）istime,retime,manaul(isdist);
//1随时间、2随动作显示窗口、3显示什么样的窗口，4显示多久、5显示后随时间的变化、6显示后随动作的变化
var showDelayIntv = 5;//界面显示延时（分钟）
var remdDelayIntv = 5;//延迟提醒时间间隔（分钟）
var curId=0;//现在提醒哪一个时间？
var nextTimer = null;//下次喝水时间点
var nextTimeDist = 0;//距离下次喝水时间
var rollIntv = 60*1000;//定时时长,毫秒
var currRemdStr;//建议喝水
var nextRemdStr;//下次喝水
var tray = null; //创建托盘图标
var remdTimeTab = null; 
var remdAmtTab = null;
var startDelaySecd = 0;//延迟多久启动定时任务
var difSecd = 3;//消除时间误差

win.util.round( mainForm);
//创建网页浏览器
var wbLayout = web.layout( mainForm )

var ahtml = string.load("/res/main.html");
wbLayout.html = ahtml;

var db = sqlite("\waterclock.db");
if(!db.existsTable("config")){ //配置表
	db.exec("create table config(parent,code,value,desc)");
	db.exec("insert into config values('user','sex','男性','性别')");
	db.exec("insert into config values('user','weight','55','体重')");
	db.exec("insert into config values('user','lifestyle','上班不运动','生活方式')");
	db.exec("insert into config values('user','mornin','8:30','上午上班')");
	db.exec("insert into config values('user','mornout','12:00','上午下班')");
	db.exec("insert into config values('user','afterin','14:00','下午上班')");
	db.exec("insert into config values('user','afterout','18:00','下午下班')");
	db.exec("insert into config values('sys','startup','true','开机启动')");
	db.exec("insert into config values('sys','filelink','true','创建快捷')");
	db.exec("insert into config values('sys','remsound','true','声音提醒')");
	db.exec("insert into config values('sys','wavefile','clock.wav','声音文件')");
	db.exec("insert into config values('sys','remwin','true','弹窗提醒')");
}
if(!db.existsTable("knowledge")){ //水知识
	db.exec("create table knowledge(id INTEGER PRIMARY KEY AUTOINCREMENT,kind,desc)");
}
if(!db.existsTable("records")){ //喝水记录
	db.exec("create table records(id INTEGER PRIMARY KEY AUTOINCREMENT, volume int NOT NULL, create_time DATE)");
}

var configTab = db.getTable("SELECT parent,code,value,desc FROM config where parent='user' or parent='sys'");
configMap={};
for(row,item in configTab){
	//console.log(item['parent'],item['code'],item['value'],item['desc']);
	configMap[item['code']] = item['value'];
}
//链接
wbLayout.onHyperlinkClick = function (ltTarget,ltEle,reason,behaviorParams) {
    if(ltEle.id="settings"){//设置
    	var configform,wb = mainForm.loadForm("/res/config.aau", );
    	//configform.show();
    }
    if(ltEle.id="minisize"){//最小化
    	mainForm.hitmin();
    }
    if(ltEle.id="close"){//关闭
    	for(i=25;1;-1){
        	mainForm.transparent( i * 10);
        	win.delay(50);
    	};
    	mainForm.close();
    	win.quitMessage();
    }
    if(ltEle.id="okay"){ //OK
    	var command = db.prepare("insert into records values(null,200,@create_time)");
    	command.bind.parameterByNamesAt( //绑定命名参数 
    		create_time = time.now();
    	)
		command.step(); 
    	mainForm.close();
    }
    if(ltEle.id="delay"){//延迟
    	nextTimer = nextTimer.addminute(remdDelayIntv);
    	nextTimeDist = remdDelayIntv;//距离下次多久
    	mainForm.hitmin();
    }
}
//按钮
wbLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) {
	if(ltEle.id="settings"){
		
		//win.msgbox("设置");
	}
}

// 响应菜单点击事件
wbLayout.onMenuItemClick =  {

	// 事件可以是一个函数或列表,如果是列表键名匹配节点的id或name属性 
	exit = function (ltTarget,ltOwner,reason,behaviorParams) {
		mainForm.close();
	}
	
	// 在这里没有匹配不到id的节点会触发default函数*/
	default = function (ltTarget,ltOwner,reason,behaviorParams) {
		var ltPopupOwner = web.layout.element( behaviorParams.he );//这是弹出菜单的按钮节点
		mainForm.msgbox( ltTarget.innerText )
	}
}
import win.ui.shadow;
win.ui.shadow(mainForm); //添加阴影边框
win.region.round(mainForm);
//win.util.popup(mainForm);
var w = ::GetSystemMetrics(0x10/*_SM_CXFULLSCREEN*/); 
var h = ::GetSystemMetrics(0x11/*_SM_CYFULLSCREEN*/) ;
mainForm.setPos(w-552,h-400,550,400);
mainForm.transparent(0);
mainForm.show();

//import win.ui.glass;
//win.ui.glass( mainForm);//玻璃效果

for(i=1;51;1){
     mainForm.transparent(i*5);
     win.delay(40);
     // mainForm.show();
 }; 
//

RegisterWindowMessage := ::User32.api( "RegisterWindowMessageA", "Long(String lpString)");
var msgTaskbarRestart = RegisterWindowMessage("taskbarcreated");

var atom,hwnd = mainForm.atom("13F0297F-F7AD-267E-142E-722AED89671D");

//重复打开激活
var reOpen = function(){
	if(!atom){ 
    	win.show(hwnd, true);
    	win.setForeground(hwnd);
    	win.quitMessage();
    	return;
	}
}

//创建快捷方式
var createLnk = function(){
	var lnk = fsys.lnk(); 
	lnk.description = frmTitle; 
	lnk.path = io._exepath //设置目标路径
	lnk.setIcon(io._exepath,1); //设置图标
	
	lnk.save(
		fsys.joinpath( 
			fsys.getSpecial(0x0010 /*_CSIDL_DESKTOPDIRECTORY*/ )
			,frmName+".lnk" 
			)
	) 
}

//自动启动
var regAutoRun = function(){
	var reg = win.reg("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run");
	reg.setSzValue("Water Clock", io._exepath );
	reg.close();
}

//创建托盘程序
var createWinTray = function(tray,nextRemdStr,frmName,nextRemdStr){
	if(tray == null){
		tray = win.util.tray(mainForm.hwnd);
		tray.message = 0x400+9981;/*_WM_TRAYMESSAGE*/
		tray.tip = nextRemdStr; //设置鼠标提示 
		//tray.pop(nextRemdStr,frmName,2,0xFFFFFFFF);
	}
}

//查询第几次提醒，距离下一次提醒时间距离
var getCurRemind = function(){
	if(nextTimer != null){
		return ;
	}
	curId = 0,nextTimeDist=0;
	var nowTime=time.now();
	nowTime.format="%H:%M";
	for(k,v in remdTimeTab){
		var nextSetterTime = time(v,"%H:%M");
		if(nowTime<=nextSetterTime){
			curId = k;
			nextTimer = nextSetterTime;
			break;
		}
	}
	if(curId>0){ //大于最大的时间点
		nextTimeDist = (tonumber(time(remdTimeTab[curId],"%H:%M")) -  tonumber(nowTime))/60;
		isShow = true;
	}
	if(startDelaySecd==0){
		startDelaySecd = (60+difSecd-(nowTime.second==0?60:nowTime.second))*1000;
	}
}
//时间驱动，人工驱动

//1随时间、2随动作显示窗口、3显示什么样的窗口，4显示多久、5显示后随时间的变化、6显示后随动作的变化
var formShowNow = function(showReason,showDelayIntv){
	if(showReason=='istime'){//时间到（3分钟后消失）
		//标题，2个按钮，托盘
		mainForm.show( true);
		
	}elseif(showReason=='retime'){//延迟时间到（3分钟后消失）
		//标题，1个按钮，托盘
		mainForm.show( true);
		
	}elseif(showReason=='isdist'){//距离时间点（5分钟后消失）
		//标题，托盘
		mainForm.show( true);
		
	}
	
}

//窗口提醒或提示(显示或消失)
var remindByAlertOrTip = function(){
	if(isAlertTime){//到点提醒
     	if(isNoNoice){//是否静默提醒
        	tray = win.util.tray(mainForm.hwnd);
        	tray.pop(currRemdStr,frmName,2,0xFFFFFFFF);
        	tray.tip = currRemdStr ;	
    	}else{//正常提醒
    		tray = win.util.tray(mainForm.hwnd);
    		//tray.pop("","")
        	tray.tip = currRemdStr ;
        	win.setForeground(mainForm.hwnd);
    		formShowNow(titlRemdStr,currRemdStr,isShowRemdWin);//窗口显示
    	}
    }else{ //未到点
    	tray = win.util.tray(mainForm.hwnd);
        tray.tip = nextRemdStr ;
        formShowNow("",nextRemdStr,isShowRemdWin,0);//窗口显示
    }
}

//查询是否提醒以及提醒语
var getCurRemindInfo = function(){
	var pCurrRemdStr = currRemdTempl;
	var pNextRemdStr = nextRemdTempl;
	if(curId>0){
		pCurrRemdStr = string.replace(pCurrRemdStr,"\{0\}",remdTimeTab[curId]);//
		pCurrRemdStr = string.replace(pCurrRemdStr,"\{1\}",remdAmtTab[curId]);//
		pNextRemdStr = string.replace(pNextRemdStr,"\{0\}",tostring(nextTimeDist));//下次提醒内容
	}else{
		pCurrRemdStr = restRemStr;//
		pNextRemdStr = restRemStr;//
	}
	currRemdStr = pCurrRemdStr;
	nextRemdStr = pNextRemdStr;
}

//定时器，每分钟探测一次是否到时间点了。
var taskRun = function(){
	getCurRemind(); //获取是否提醒，及提醒次数，数据
    getCurRemindInfo();//获取提醒提示信息
	createWinTray(tray,nextRemdStr,frmName,nextRemdStr);
	remindByAlertOrTip();
	if(showDelayIntv>0){//显示时长
		showDelayIntv--;
	}
	var tmId = mainForm.addtimer( 
    	startDelaySecd,
    	function(hwnd,msg,id,tick){
			getCurRemind(); //获取是否提醒，及提醒次数，数据
        	getCurRemindInfo();//获取提醒提示信息
        	//createWinTray(tray,nextRemdStr,frmName,nextRemdStr); //电脑托盘
			remindByAlertOrTip();//提醒
        	return rollIntv;
    	}
	)
}

//事件监听器
mainForm.wndproc = function(hwnd,message,wparam,lparam){	
    select(message) {//判断消息类型
        case 0x10/*_WM_CLOSE窗口关闭消息*/{
            //这里可以写窗口关闭时回调信息
            //::PostMessage(mainForm.hwnd, 0x112,0xF020, 0);
    		//mainForm.show( false );
    		//return false;
    		if(tray != null){
    			tray.delete();
    		}
        }
        case (0x400+9981/*_WM_TRAYMESSAGE*/) { //托盘图标消息
            select(lparam){
                case (0x203){//双击托盘图标打开窗口
                   stat = win.isVisible(mainForm.hwnd);
                   if(stat){
                       ::PostMessage(mainForm.hwnd,0x112,0xF020,0); 
                       mainForm.show(true);
                   }else{
                       
                   }
                   ::PostMessage(mainForm.hwnd, 0x112, 0xF120, 0)；
                   win.setForeground(mainForm.hwnd);
                   mainForm.show(true);//还原窗口
                }
                case (0x205/*_WM_RBUTTONUP*/){//单击鼠标右键弹出菜单
	    			x,y = mouse.getPos();
	    			//弹出托盘菜单以前，一定要前置主窗口中，不然不点击菜单不会消失
	    			win.setForeground(mainForm.hwnd)
	    			mainForm.popmenu.popup( x,y,true );
                }
                case (0x0202){//单击鼠标左键前置窗口
                    win.setForeground(mainForm.hwnd);
                }
                
            }
        }
        case msgTaskbarRestart/*任务栏重建*/{
            win.util.tray.Shell_NotifyIcon(0x2/*_NIM_DELETE*/,tray.m_tnd);
            win.util.tray.Shell_NotifyIcon(0x0/*_NIM_ADD*/,tray.m_tnd);
        }
        case( 0x112/*_WM_SYSCOMMAND*/ ){ //系统命令消息
			if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
            	mainForm.show(false); //隐藏窗口
            	return true;//阻击默认消息传递，取消最小化过程
			} 
		}
    }
    //无返回值则继续调用默认回调函数
}

reOpen();//探测重新打开
taskRun();//执行任务
win.loopMessage();

