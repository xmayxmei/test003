import win.ui;
import win.ui.menu;
import win.ui.atom;
import win.ui.minmax;
import win.util.tray;
import win.reg;
import fsys.lnk;
import fsys.ini;
/*DSG{{*/
mainForm = ..win.form(text="喝水闹钟，定时提醒您该喝水啦。";right=464;bottom=216;image=$"\res\drink2.jpg";border="thin";max=false;topmost=1)
mainForm.add(
button={cls="button";text="我马上喝";left=160;top=176;right=248;bottom=206;z=2};
button2={cls="button";text="今天别烦我";left=368;top=176;right=456;bottom=206;z=3};
button3={cls="button";text="5分钟后提醒我";left=262;top=176;right=354;bottom=206;z=4};
button4={cls="button";text="设置";left=57;top=177;right=104;bottom=207;z=6};
text1={cls="static";left=160;top=8;right=472;bottom=48;font=LOGFONT( h=-32 );notify=1;transparent=1;z=1};
text2={cls="static";left=160;top=64;right=480;bottom=104;font=LOGFONT( h=-27 );transparent=1;z=5}
)
/*}}*/

var frmName = "喝水闹钟";//
var frmTitle = "喝水闹钟，定时提醒您该喝水啦。";
var titlRemdStr = "^_^亲，该喝水啦！";
var restRemStr = "^_^亲，该休息啦！";
var currRemdTempl = "{0},建议喝水{1}ML";//建议喝水模板
var nextRemdTempl = "距离下次喝水还有{0}分钟";//下次喝水模板
var remdTimeTabStr = "8:30,9:30,10:30,11:30,12:30,14:00,15:00,16:00,17:00,18:00";
var remdAmtTabStr = "150,200,200,200,150,200,200,200,150,150";

var isTaskOpen = true;//当日全局开关
var isNoNoice = false;//是否静默提醒（别烦我时不显示）
var isShowRemdWin = false;//显示窗口（延后提醒时不显示）
var isAlertTime = false;//时间到
var showDelayIntv = 5*60;//界面显示延时
var remdDelayIntv = 5;//延迟提醒时间间隔
var remdDelayTimes = 0;//延迟提醒次数
var delayDown = 0;//延迟[5]分钟倒计时
var curId=0;//现在提醒哪一个时间？
var nextTimeDist = 0;//距离下次喝水时间
var rollIntv = 60*1000;//定时时长,毫秒
var currRemdStr;//建议喝水
var nextRemdStr;//下次喝水
var tray = null; //创建托盘图标
var remdTimeTab = null; 
var remdAmtTab = null;
var startDelaySecd = 0;//延迟多久启动定时任务
var difSecd = 3;//消除时间误差

RegisterWindowMessage := ::User32.api( "RegisterWindowMessageA", "Long(String lpString)");
var msgTaskbarRestart = RegisterWindowMessage("taskbarcreated");

var atom,hwnd = mainForm.atom("13F0297F-F7AD-267E-142E-722AED89671D");

mainForm.button4.oncommand = function(id,event){
	//mainForm.msgbox( mainForm.button4.text );
	var nextform,wb = mainForm.loadForm("\next.aau", );
	//nextform.show(true);
	
}
//重复打开激活
var reOpen = function(){
	if(!atom){ 
    	win.show(hwnd, true);
    	win.setForeground(hwnd);
    	win.quitMessage();
    	return;
	}
}
//读取配置文件
var readOrCreateConf = function(){
	var ini=fsys.ini("\userconf.ini");
	
	conf = ini.getSection("remdTitle");
	if(conf.frmName==null || conf.frmTitle==null){
		conf.frmName = frmName;
		conf.frmTitle = frmTitle;
		conf.titlRemdStr = titlRemdStr;
		conf.restRemStr =  restRemStr;
		conf.save();
	}else{
		frmName = conf.frmName;
		frmTitle = conf.frmTitle;
		titlRemdStr = conf.titlRemdStr;
		restRemStr = conf.restRemStr;
	}
	
	conf = ini.getSection("remdTempl");
	if(conf.currRemdTempl==null || conf.nextRemdTempl==null){
		conf.currRemdTempl = currRemdTempl;
		conf.nextRemdTempl = nextRemdTempl;
		conf.save();
	}else{
		currRemdTempl = conf.currRemdTempl;
		nextRemdTempl = conf.nextRemdTempl;
	}
	
	conf = ini.getSection("remdTab");
	if(conf.remdTimeTabStr ==null || conf.remdAmtTabStr ==null){
		conf.remdTimeTabStr = remdTimeTabStr;
		conf.remdAmtTabStr = remdAmtTabStr;
		conf.save();
	}else{
		remdTimeTab = string.split(conf.remdTimeTabStr,",");
		remdAmtTab = string.split(conf.remdAmtTabStr,",");
	}
}


//创建快捷方式
var createLnk = function(){
	var lnk = fsys.lnk(); 
	lnk.description = frmTitle; 
	lnk.path = io._exepath //设置目标路径
	lnk.setIcon(io._exepath,1); //设置图标
	
	lnk.save(
		fsys.joinpath( 
			fsys.getSpecial(0x0010 /*_CSIDL_DESKTOPDIRECTORY*/ )
			,frmName+".lnk" 
			)
	) 
}

//自动启动
var regAutoRun = function(){
	var reg = win.reg("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run");
	reg.setSzValue("Water Clock", io._exepath );
	reg.close();
}

//创建托盘程序
var createWinTray = function(tray,nextRemdStr,frmName,nextRemdStr){
	if(tray == null){
		tray = win.util.tray(mainForm.hwnd);
		tray.message = 0x400+9981;/*_WM_TRAYMESSAGE*/
		tray.tip = nextRemdStr; //设置鼠标提示 
		//tray.pop(nextRemdStr,frmName,2,0xFFFFFFFF);
	}
}
createWinTray(tray,nextRemdStr,frmName,nextRemdStr);
//查询第几次提醒，距离下一次提醒时间距离
var getCurRemind = function(){
	curId = 0,nextTimeDist=0,isAlertTime=false;//时间到
	var nowTime=time.now();
	nowTime.format="%H:%M";
	for(k,v in remdTimeTab){
		var nextSetterTime = time(v,"%H:%M");
		if(nowTime<=nextSetterTime){
			curId = k;
			if(nowTime ==nextSetterTime){
				isAlertTime = true;
			}else{
				isAlertTime = false;
			}
			break;
		}
	}
	if(curId==0){ //大于最大的时间点
		isShowRemdWin = false;
		isAlertTime = false;
	}
	if(curId==1){//如果是当天第一次提醒
		isNoNoice = false;
	}
	if(curId>0){
		nextTimeDist = (tonumber(time(remdTimeTab[curId],"%H:%M")) -  tonumber(nowTime))/60;
		if(isAlertTime){
			isShowRemdWin = true;
		}
		showDelayIntv--;
		if(showDelayIntv==0){
			//时间到
			isShowRemdWin = false;
		}
	}
	if(startDelaySecd==0){
		startDelaySecd = (60+difSecd-(nowTime.second==0?60:nowTime.second))*1000;
	}
}

//查询是否提醒以及提醒语
var getCurRemindInfo = function(){
	var pCurrRemdStr = currRemdTempl;
	var pNextRemdStr = nextRemdTempl;
	if(curId>0){
		pCurrRemdStr = string.replace(pCurrRemdStr,"\{0\}",remdTimeTab[curId]);//
		pCurrRemdStr = string.replace(pCurrRemdStr,"\{1\}",remdAmtTab[curId]);//
		pNextRemdStr = string.replace(pNextRemdStr,"\{0\}",tostring(nextTimeDist));//下次提醒内容
	}else{
		pCurrRemdStr = restRemStr;//
		pNextRemdStr = restRemStr;//
	}
	currRemdStr = pCurrRemdStr;
	nextRemdStr = pNextRemdStr;
}

//窗口显示
var formShowNow = function(titleText,remdText,isShow,delays){
	mainForm.show( isShow );
    mainForm.text1.text=titleText;
    mainForm.text2.text=remdText;
    mainForm.button.show(isShow) ;
    mainForm.button2.show(isShow) ;
    if(delays<2){//如果延迟2次以后，不容许再延迟
        mainForm.button3.show(isShow);
    }
}

//窗口提醒或提示(显示或消失)
var remindByAlertOrTip = function(){
	if(isAlertTime){//到点提醒
     	if(isNoNoice){//是否静默提醒
        	tray = win.util.tray(mainForm.hwnd);
        	tray.pop(currRemdStr,frmName,2,0xFFFFFFFF);
        	tray.tip = currRemdStr ;	
    	}else{//正常提醒
    		tray = win.util.tray(mainForm.hwnd);
    		//tray.pop("","")
        	tray.tip = currRemdStr ;
        	win.setForeground(mainForm.hwnd);
    		formShowNow(titlRemdStr,currRemdStr,isShowRemdWin,remdDelayTimes);//窗口显示
    	}
    }else{ //未到点
    	tray = win.util.tray(mainForm.hwnd);
        tray.tip = nextRemdStr ;
        formShowNow("",nextRemdStr,isShowRemdWin,0);//窗口显示
    }
}

//定时器，每分钟探测一次是否到时间点了。
var taskRun = function(){
	if(isTaskOpen){
		getCurRemind(); //获取是否提醒，及提醒次数，数据
    	getCurRemindInfo();//获取提醒提示信息
		//createWinTray(tray,nextRemdStr,frmName,nextRemdStr);
		remindByAlertOrTip();
		var tmId = mainForm.addtimer( 
    		startDelaySecd,
    		function(hwnd,msg,id,tick){
				getCurRemind(); //获取是否提醒，及提醒次数，数据
        		getCurRemindInfo();//获取提醒提示信息
        		//createWinTray(tray,nextRemdStr,frmName,nextRemdStr); //电脑托盘
				remindByAlertOrTip();//提醒
				if(!isNoNoice){//非静默提醒下才恢复窗口显示
					if(delayDown>0){//延迟倒计时
						delayDown--;
						if(delayDown==0){//倒计时完
							isShowRemdWin = true;//恢复窗口显示
						}
					}
				}
        		return rollIntv;
    		}
		)
	}
}

//窗口消失
var fadeHide = function(){
	mainForm.show(true);
    for(i=17;1;-1){
        mainForm.transparent( i * 15);
        x,y,cx,cy = mainForm.getPos();
        mainForm.setPos(x-1,y-1,cx+2,cy+2);
        win.delay(5);
    }; 
    win.quitMessage();
}

//事件监听器
mainForm.wndproc = function(hwnd,message,wparam,lparam){	
    select(message) {//判断消息类型
        case 0x10/*_WM_CLOSE窗口关闭消息*/{
            //这里可以写窗口关闭时回调信息
            //::PostMessage(mainForm.hwnd, 0x112,0xF020, 0);
    		//mainForm.show( false );
    		//return false;
    		if(tray != null){
    			tray.delete();
    		}
    		fadeHide();
        }
        case (0x400+9981/*_WM_TRAYMESSAGE*/) { //托盘图标消息
            select(lparam){
                case (0x203){//双击托盘图标打开窗口
                   stat = win.isVisible(mainForm.hwnd);
                   if(stat){
                       ::PostMessage(mainForm.hwnd,0x112,0xF020,0); 
                       mainForm.show(true);
                   }else{
                       
                   }
                   ::PostMessage(mainForm.hwnd, 0x112, 0xF120, 0)；
                   win.setForeground(mainForm.hwnd);
                   mainForm.show(true);//还原窗口
                }
                case (0x205/*_WM_RBUTTONUP*/){//单击鼠标右键弹出菜单
	    			x,y = mouse.getPos();
	    			//弹出托盘菜单以前，一定要前置主窗口中，不然不点击菜单不会消失
	    			win.setForeground(mainForm.hwnd)
	    			mainForm.popmenu.popup( x,y,true );
                }
                case (0x0202){//单击鼠标左键前置窗口
                    win.setForeground(mainForm.hwnd);
                }
                
            }
        }
        case msgTaskbarRestart/*任务栏重建*/{
            win.util.tray.Shell_NotifyIcon(0x2/*_NIM_DELETE*/,tray.m_tnd);
            win.util.tray.Shell_NotifyIcon(0x0/*_NIM_ADD*/,tray.m_tnd);
        }
        case( 0x112/*_WM_SYSCOMMAND*/ ){ //系统命令消息
			if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
            	mainForm.show(false); //隐藏窗口
            	return true;//阻击默认消息传递，取消最小化过程
			} 
		}
    }
    //无返回值则继续调用默认回调函数
}

mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单

mainForm.popmenu.add('打开',function(id){
	//在下面输入菜单响应代码
	mainForm.show(true);
});
mainForm.popmenu.add();//分隔线
mainForm.popmenu.add('退出',function(id){ 
	mainForm.close() ;
});

//喝了（马上喝）
mainForm.button.oncommand = function(id,event){
	//记录本次喝水时间
	isShowRemdWin = false;
	remdDelayTimes = 0;//延迟次数清零
	mainForm.show(isShowRemdWin);
	var remarkTime=time.now();
	remarkTime.format="%Y-%m-%d %H:%M";
}

//5分钟后再次提醒
mainForm.button3.oncommand = function(id,event){
	//mainForm.msgbox( mainForm.button3.text );
	remdDelayTimes++;//延迟提醒次数
	delayDown = remdDelayIntv;//延迟时间倒计时
	isShow = false;
	mainForm.show( isShow );
	//mainForm.close();
	
}

//今天别烦我（今天不会主动提醒）
mainForm.button2.oncommand = function(id,event){
	//mainForm.msgbox( mainForm.button2.text );
	isNoNoice = true;//静默提醒
	remdDelayTimes = 0;//延迟次数清零
	isShow = false;
	mainForm.show( isShow );	
}

//关闭时最小化
/**
mainForm.onClose = function(hwnd,message,wParam,lParam){
	::PostMessage(mainForm.hwnd, 0x112,0xF020, 0);
    mainForm.show( false );
    return false;
}
**/
reOpen();//探测重新打开
readOrCreateConf();//加载配置文件
//第一次运行
createLnk();//创建快捷方式
regAutoRun();//注册到自动启动


taskRun();//定时任务
win.loopMessage(); 
